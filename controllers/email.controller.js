const axios = require('axios')
const {sendMail, listThreads, getThreadMessages, getEmail, modifyLabels} = require('../helpers/emailHelpers');
const { google } = require('googleapis');


const sendEmailController = async(req,res) =>{



try{

    let emailAddress = await getEmail()
    console.log(emailAddress)
    if(emailAddress=="error occured"){
        res.set(500).send('Error validating profile')
    }

    

    //1. read inbox threads
    const threadsList = await listThreads('label:inbox');
    // console.log(threadsList)
    if(threadsList=="error occured"){
        res.set(500).send('Error fetching emails')
    }

    if(threadsList.length == 0){
        res.set(200).send('No thread List available')
    }

    //2. filter out unreplied email threads
    let mainThreadsList = [];

    //loop through all threads
    for(let i=0; i<threadsList.length; i++){
        let threadMessages = await getThreadMessages(threadsList[i].id)
        // console.log(threadMessages)

        
        let senderMatchArray = [] //Array to store the sender of all messages in a thread
        let regExp = /\<([^)]+)\>/; //regex to get data between <>

        //loop through all email message objects of a thread and append details if email to be sent
        for(let j=0; j<threadMessages.length; j++){
            let headerArray = await threadMessages[j].payload.headers
            headerArray.forEach(element => {
                if (element.name == 'From') {
                    let matches = regExp.exec(element.value);
                    if(matches){
                    let sender = matches[1] //get sender email
                    senderMatchArray.push(sender)
                    }
                    else{
                        let sender = element.value //get sender email
                        senderMatchArray.push(sender)

                    }
                }
            });
            }

        // console.log(senderMatchArray);

        //if sender is not 'me' or length is 1(sender can be 'me'), append list
        if((senderMatchArray.every(val => val != emailAddress)) || senderMatchArray.length==1){
                let ob = {threadId: threadMessages[0].threadId, sender: senderMatchArray[0]}
                mainThreadsList.push(ob)
        }
        
    }
    console.log(mainThreadsList)
    
    mailUids = []
    //3. send emails to these email id
    for (item of mainThreadsList){
        // setting the email specifics
        let options = {
            to: item.sender,
            replyTo: item.sender,
            subject: 'Hey!1',
            text: 'This is an auto generated email',
            textEncoding: 'base64',
            headers: [{ key: 'AutoGenerated', value: 'NodeJs' }],
            };

         const id = await sendMail(options, item.threadId); //id --> unique id identifying email
         if(id=="error occured"){
            res.set(500).send('Error sending email')
         }
         mailUids.push(id);

    }




   


    //4. tag it with a label - create label if not created
    mailUids.forEach(async(mailUid)=>{
        let message = await modifyLabels(mailUid) 
        if(message=="error occured"){
            res.set(500).send('Error sending email')
         }

    })
    
    



    res.set(200).send("done") 

}catch(err){
    res.set(500).send('Error sending email')
    console.log(err)
}


}

module.exports = {sendEmailController}